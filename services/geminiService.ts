
import { GoogleGenAI, Modality } from "@google/genai";
import { GEMINI_PROMPT } from '../constants';
import type { UploadedImage } from '../types';

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable is not set");
}
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export async function generateStyledImage(
  productImage: UploadedImage,
  referenceImage: UploadedImage,
  lightingType: string,
  cameraAngle: string
): Promise<string> {
  
  const fullPrompt = `${GEMINI_PROMPT}\n\nLighting Type: ${lightingType}\nCamera Angle: ${cameraAngle}`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: productImage.base64,
              mimeType: productImage.mimeType,
            },
          },
          {
            inlineData: {
              data: referenceImage.base64,
              mimeType: referenceImage.mimeType,
            },
          },
          {
            text: fullPrompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        return part.inlineData.data;
      }
    }
    
    throw new Error("No image was generated by the model.");

  } catch (error) {
    console.error("Error calling Gemini API:", error);
    if (error instanceof Error) {
        throw new Error(`Failed to generate image: ${error.message}`);
    }
    throw new Error("An unknown error occurred while generating the image.");
  }
}
